import java.util.*;
import java.io.File;
import java.lang.Thread;

import soot.*;
import soot.BodyTransformer;
import soot.PackManager;
import soot.Transform;
import soot.SootClass;
import soot.SootMethod;
import soot.Unit;
import soot.jimple.InvokeExpr;
import soot.jimple.Jimple;
import soot.jimple.Stmt;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.ReachableMethods;
import soot.options.Options;
import soot.toolkits.graph.ExceptionalUnitGraph;
import soot.toolkits.graph.UnitGraph;
import soot.toolkits.scalar.ArraySparseSet;
import soot.toolkits.scalar.SmartLocalDefs;
import soot.util.queue.QueueReader;
import soot.toolkits.scalar.SimpleLiveLocals;
import soot.jimple.StaticInvokeExpr;
import soot.jimple.toolkits.annotation.purity.AbstractInterproceduralAnalysis;
import soot.jimple.toolkits.callgraph.CHATransformer;


public class SootAnalysis {
    public static void main(String[] args){

        
        // Scene.v().addBasicClass("java.util.Formatter",SootClass.SIGNATURES);
        // Scene.v().addBasicClass("java.lang.System",SootClass.SIGNATURES);
        // Scene.v().addBasicClass("Calculator",SootClass.SIGNATURES);
        // PackManager.v().getPack("wjtp").add(new Transform("wjtp.inter", new SceneTransformer() {
        // 	@Override
		// 	protected void internalTransform(String phaseName, Map<String, String> options) {
        //         //String mainclass = "Calculator";

        // //set classpath
	    // String javapath = System.getProperty("java.class.path");
	    // String jredir = System.getProperty("java.home")+"/lib/rt.jar";
	    // String path = javapath+File.pathSeparator+jredir;
        // //SootClass appclass = Scene.v().loadClassAndSupport(mainclass);
	    // //Scene.v().setMainClass(appclass);
        // 		SootClass s=Scene.v().getMainClass();
        //         System.out.println("Main Class Deepak:" + String.valueOf(Scene.v().getMainClass()));
		//     CallGraph cg=Scene.v().getCallGraph();

		//    System.out.println(cg);

		//    ReachableMethods rm=Scene.v().getReachableMethods();

		//    System.out.println(rm);

		//    QueueReader<MethodOrMethodContext> rmIt=rm.listener();


        //    System.out.println(rmIt);


		//    while(rmIt.hasNext()){

		// 	SootMethod method=rmIt.next().method();
		// 	System.out.println(method.getName());
		

		//    }
			    
        //     }
        // }));
        // String javapath = System.getProperty("java.class.path");
	    // String jredir = System.getProperty("java.home")+"/lib/rt.jar";
	    // String path = javapath+File.pathSeparator+jredir;
	    // Scene.v().setSootClassPath(path);
        //     Scene.v().loadNecessaryClasses();
        //     String mainclass = "Calculator";


        // SootClass appclass = Scene.v().loadClassAndSupport(mainclass);

        //     Scene.v().setMainClass(appclass);
        //     // PackManager.v().runPacks();
        //     Scene.v().addBasicClass(mainclass,SootClass.SIGNATURES);
        //     Scene.v().addBasicClass("java.lang.System",SootClass.SIGNATURES);
        //     soot.Main.main(args);

        configureSoot("test");
        Scene.v().loadNecessaryClasses();
        CallGraphTransformer callGraphTransformer=new CallGraphTransformer();
        



        Pack pack=PackManager.v().getPack("wjtp");
        pack.add(new Transform("wjtp.bytecg", callGraphTransformer));
        pack.add(new Transform("wjtp.inter", ByteInterFlowTransformer.v()));

        
        
        // ByteBodyTransformer bTransformer=new ByteBodyTransformer();
        // Transform transform=new Transform("jtp.body", bTransformer);
        // PackManager.v().getPack("jtp").add(transform);
        PackManager.v().runPacks();
        callGraphTransformer.printCG();



	    



    }
    public static void configureSoot(String classpath){
        
        Options.v().set_whole_program(true);
        Options.v().set_allow_phantom_refs(false);
        Options.v().set_prepend_classpath(true);
        Options.v().set_src_prec(Options.src_prec_class);
        Options.v().set_output_format(Options.output_format_jimple);
        ArrayList<String> list=new ArrayList<>();
        list.add(classpath);
        Options.v().set_process_dir(list);
        Options.v().setPhaseOption("cg.spark", "on");
    }


    }
    

