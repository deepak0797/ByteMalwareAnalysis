import java.util.List;
import java.util.Map;
import java.util.Set;

import soot.SceneTransformer;
import soot.SootMethod;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.annotation.purity.SootMethodFilter;
import soot.jimple.toolkits.callgraph.Filter;



public class ByteInterFlowTransformer extends SceneTransformer{

    private static ByteInterFlowTransformer instance = new ByteInterFlowTransformer();

    public static ByteInterFlowTransformer v() {
        
      return instance;
    }

    @Override
	  protected void internalTransform(String phaseName, Map options) {
	  	
	    CallGraph cg = CallGraphTransformer.cg;
	    Set<SootMethod> reachableMethods = CallGraphTransformer.reachableMethods_;

        System.out.println("reachablemethods"+reachableMethods);

        
        
        
            
        
	        
	    //do the analysis
			ByteInterProceduralAnalysis inter = new ByteInterProceduralAnalysis(cg, 
					reachableMethods.iterator());

	  }
    }

