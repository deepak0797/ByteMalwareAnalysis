

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Arrays;


public class SourceSinkDetection {
    public static Map<String,ArrayList<String>> sources=new HashMap<String,ArrayList<String>>();
    public static Map<String,ArrayList<String>> sinks=new HashMap<String,ArrayList<String>>();

    public SourceSinkDetection(){
        //System.out.println("check for source and sink");

    }

    public static boolean isSource(String className,String methodName){
        //System.out.println("check for source method"+methodName);
        ArrayList methods=sources.get(className);

        //System.out.println("check for source method for methods"+methods);

        if (methods.contains(methodName)){
            return true;
        }
        return false;


    }

    public static boolean isSink(String className,String methodName){
        //System.out.println("check for sink method"+methodName);
        ArrayList methods=sinks.get(className);

        //System.out.println("check for sink method for methods"+methods);

        if (methods.contains(methodName)){
            return true;
        }
        return false;


    }

    public static void main(String args[]){
        extractSources("sources.txt");
        extractSinks("sinks.txt");
        System.out.println(sources);
        System.out.println(sources.size());
        System.out.println(sinks);
        System.out.println(sinks.size());

    }

    private static Map<String, ArrayList<String>> extractSources(String path){
        System.out.println("in extract source method");
        Map<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
        try{
            FileInputStream fis = new FileInputStream(path);
            InputStreamReader iReader = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(iReader);
            String line;
            String className = null;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("#")) {
                    /*This means that the line contains class name*/
                    className = line.substring(1); /*we can skip the first character and copy the class name*/
                }
                if(!sources.containsKey(className)){
                    sources.put(className, new ArrayList<String>());
                }else{
                    sources.get(className).add(line);
                }

                //System.out.println(sources);
            }
            fis.close();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }

        return map;

    }

    private static Map<String, ArrayList<String>> extractSinks(String path){
        System.out.println("in extract sinks method");
        Map<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
        try{
            FileInputStream fis = new FileInputStream(path);
            InputStreamReader iReader = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(iReader);
            String line;
            String className = null;

            while ((line = br.readLine()) != null) {
                if (line.startsWith("#")) {
                    /*This means that the line contains class name*/
                    className = line.substring(1); /*we can skip the first character and copy the class name*/
                }

                if(!sinks.containsKey(className)){
                    sinks.put(className, new ArrayList<String>());
                }else {
                    sinks.get(className).add(line);
                }

            }
            fis.close();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }

        return map;

    }
}
